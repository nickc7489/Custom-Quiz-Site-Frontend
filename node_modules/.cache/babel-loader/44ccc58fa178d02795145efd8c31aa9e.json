{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nickc\\\\Coding Projects\\\\Web Dev\\\\React\\\\Custom-Quiz-Website\\\\quiz-creator\\\\src\\\\components\\\\questions\\\\QuestionContent.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport FreeOption from \"./FreeOption\";\nimport MultipleOption from \"./MultipleOption\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuestionContent(props) {\n  _s();\n\n  const [dummyState, setDummy] = useState(true);\n\n  function makeid(length) {\n    var result = \"\";\n    var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  }\n\n  function freeAddHandler() {\n    const num = props.questions[props.num][\"options\"].length;\n    const dummy = props.questions;\n    dummy[props.num][\"options\"].push({\n      num: num,\n      text: \"\"\n    });\n    props.updateQuestions(dummy);\n    setDummy(!dummyState);\n  }\n\n  function multAddHandler() {\n    const num = props.questions[props.num][\"options\"].length;\n    const dummy = props.questions;\n    dummy[props.num][\"options\"].push({\n      num: num,\n      text: \"\",\n      correct: false\n    });\n    props.updateQuestions(dummy);\n    setDummy(!dummyState);\n  }\n\n  if (!props.questions[props.num].hasOwnProperty(\"options\")) {\n    props.questions[props.num][\"options\"] = [];\n  }\n\n  const options = props.questions[props.num][\"options\"];\n\n  if (props.questions[props.num][\"type\"] === \"Free Response\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: freeAddHandler,\n        children: \"Add Accepted Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: options.map(option => /*#__PURE__*/_jsxDEV(FreeOption, {\n          optionNum: option.num,\n          text: option.text,\n          num: props.num,\n          updateQuestions: props.updateQuestions,\n          questions: props.questions\n        }, makeid(10), false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    const buttonName = makeid(10);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: multAddHandler,\n        children: \"Add Possible Answer - Check Correct Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: options.map(option => /*#__PURE__*/_jsxDEV(MultipleOption, {\n          optionNum: option.num,\n          text: option.text,\n          correct: option.correct,\n          num: props.num,\n          updateQuestions: props.updateQuestions,\n          questions: props.questions,\n          name: buttonName\n        }, makeid(10), false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(QuestionContent, \"kDFoG7SvJdnjJ6+sKWhO8dR6Vmc=\");\n\n_c = QuestionContent;\nexport default QuestionContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionContent\");","map":{"version":3,"sources":["C:/Users/nickc/Coding Projects/Web Dev/React/Custom-Quiz-Website/quiz-creator/src/components/questions/QuestionContent.js"],"names":["useState","FreeOption","MultipleOption","QuestionContent","props","dummyState","setDummy","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","freeAddHandler","num","questions","dummy","push","text","updateQuestions","multAddHandler","correct","hasOwnProperty","options","map","option","buttonName"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport FreeOption from \"./FreeOption\";\r\nimport MultipleOption from \"./MultipleOption\";\r\n\r\nfunction QuestionContent(props) {\r\n  const [dummyState, setDummy] = useState(true);\r\n  function makeid(length) {\r\n    var result = \"\";\r\n    var characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function freeAddHandler() {\r\n    const num = props.questions[props.num][\"options\"].length;\r\n    const dummy = props.questions;\r\n    dummy[props.num][\"options\"].push({\r\n      num: num,\r\n      text: \"\",\r\n    });\r\n    props.updateQuestions(dummy);\r\n    setDummy(!(dummyState));\r\n  }\r\n\r\n  function multAddHandler() {\r\n    const num = props.questions[props.num][\"options\"].length;\r\n    const dummy = props.questions;\r\n    dummy[props.num][\"options\"].push({\r\n      num: num,\r\n      text: \"\",\r\n      correct: false,\r\n    });\r\n    props.updateQuestions(dummy);\r\n    setDummy(!(dummyState));\r\n  }\r\n  if (!props.questions[props.num].hasOwnProperty(\"options\")) {\r\n    props.questions[props.num][\"options\"] = [];\r\n  }\r\n  const options = props.questions[props.num][\"options\"];\r\n  if (props.questions[props.num][\"type\"] === \"Free Response\") {\r\n    return (\r\n      <>\r\n        <button type=\"button\" onClick={freeAddHandler}>\r\n          Add Accepted Response\r\n        </button>\r\n        <div>\r\n          {options.map((option) => (\r\n            <FreeOption\r\n              optionNum={option.num}\r\n              text={option.text}\r\n              num={props.num}\r\n              updateQuestions={props.updateQuestions}\r\n              questions={props.questions}\r\n              key={makeid(10)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  } else {\r\n    const buttonName = makeid(10);\r\n    return (\r\n      <>\r\n        <button type=\"button\" onClick={multAddHandler}>\r\n          Add Possible Answer - Check Correct Answer\r\n        </button>\r\n        <div>\r\n          {options.map((option) => (\r\n            <MultipleOption\r\n              optionNum={option.num}\r\n              text={option.text}\r\n              correct={option.correct}\r\n              num={props.num}\r\n              updateQuestions={props.updateQuestions}\r\n              questions={props.questions}\r\n              name={buttonName}\r\n              key={makeid(10)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionContent;\r\n"]},"metadata":{},"sourceType":"module"}